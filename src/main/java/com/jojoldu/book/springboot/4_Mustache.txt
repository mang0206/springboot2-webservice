/*
템플릿 엔진이란?
지정된 템플릿 양식과 데이터가 합쳐져 HTML문서를 출력하는 소프트웨어 (JSP,Freemarker - React, Vue)
 - JSP,Freemarker 는 서버 템플릿 엔진
 서버 템플릿 엔진은 서버에서 구동된다 서버 템플릿 엔진을 이용한 화면 생성은 서버에서 Java 코드로 문자열을 만든 뒤
 이 문자열을 HTML로 변환하여 브라우저로 전달한다.
 - React, Vue 는 클라이언트 템플릿 엔진
 클라이언트 템플릿 엔진은 브라우저에서 화면을 생성한다. 즉, 서버에서 이미 코드가 벗어난 경우이다.
 그래서 서버에서는 Json 혹은 Xml 형식의 데이터만 전달하고 클라이언트에서 조립한다.
 (최근에는 서버 사이드 렌더링을 지원한다.)

머스테치란
머스테치는 수많은 언어를 지원하는 가장 심플한 템플릿 엔진이다.
루비, 자바스크립트, 파이썬, PHP, 자바, 펄, Go 등 현존하는 대부분 언어를 지원하고 있다.
그러다 보니 자바에서 사용될 때는 서버 템플릿 엔진으로, 자바스크립트에서 사용될 때는 클라이언트 템플릿 엔진으로 사용할 수 있다.

머스테치의 장점
 * 문법이 다른 템플릿 엔진보다 심플하다.
 * 로직 코드를 사용할 수 없어 View의 역할과 서버의 역할이 명확하게 분리된다.
 * Mustache.js와 Mustache.java 2가지가 있어 하나의 문법으로 클라이언트/서버 템플릿 모두 사용가능
*/


트랜잭션
데이터베이스 상태를 변경하는 작업 또는 한번에 수행되어야 하는 연산들을 의미
begin,commit을 자동으로 수행하며 예외 발생 시 rollback 처리를 자동으로 수행한다.

트랜잭션의 4가지 특징
1. 원자성 : 한 트랜잭션 내에서 실행한 작업들은 하나의 단위로 처리한다. 즉, 모두 성공 또는 모두 실패.
2. 일관성 : 트랜잭션은 일관성 있는 데이터베이스 상태를 유지한다.
3. 격리성 : 동시에 실행되는 트랜잭션들이 서로 영향을 미치치 않도록 격리해야한다.
4. 영속성 : 트랜잭션을 성공적으로 마치면 결과가 항상 저장되어야 한다.

스프링에서는 간단하게 어노테이션 방식으로 @Transactional을 메소드, 클래스, 인터페이스 위에 추가하여 사용하는 방식이 일반적이다.
이 방식을 선언적 트랜잭션이라 부르며, 적용된 범위에서는 트랜잭션 기능이 포함된 프록시 객체가 생성되어 자동으로 commit 혹은 rollback을 진행해준다.

TDD와 단위 테스트

TDD
테스트가 주도하는 개발을 이햐기 하며 테스트 코드를 먼저 작성하는 것부터 시작하는 개발
TDD의 레드 그린 사이클
1. 항상 실패하는 테스트를 먼저 작성(Red)
2. 테스트가 통과하는 프로덕션 코드를 작성(Green)
3. 테스트가 통과하면 프로덕션 코드를 리팩토링(Refactor)

단위 테스트
TDD의 첫 번째 단계인 기능 단위의 테스트 코드를 작성하는 것을 이야기한다.
TDD와 달리 테스트 코드를 꼭 먼저 작성해야 하는 것도 아니고, 리펙토링도 포함되지 않는다. 순수하게 테스트 코드만 작성하는 것을 이야기한다.

테스트 코드 작성의 이점
- 단위 테스트는 개발단계 초기에 문제를 발견하게 도와준다.
- 단위 테스트는 개발자가 나중에 코드를 리팩토링하거나 라이브러리 업그레이드 등에서
기존 기능이 올바르게 작동하는지 확인할 수 있다.(ex 회귀 테스트)
- 단위 테스트는 기능에 대한 불확실성을 감소시킬 수 있다
- 단위 테스트는 시스템에 대한 실제 문서를 제공한다. 즉, 단위 테스트 자체가 문서로 사용할 수 있다.
-----------------------------------------------------
스프링 부트 내장 WAS
스프링 부트에서는 내장 WAS를 사용하는 것을 권장하는데 이유는 언제 어디서나 같은 환경에서 스프링 부트를 배포할 수 있기 때문이다.
외장 WAS를 쓴다고 하면 모든 서버는 WAS의 종류와 버전, 설정을 일치시켜야만 한다.
새로운 서버가 추가되면 모든 서버가 같은 WAS의 환경을 구출해야만 한다. 시간도 많이 필요한 큰 작업이 될 수도 있다.
내장 WAS를 사용할 경우 이 문제를 모두 해결할 수 있다.
----------------------------------------------------

모르는 개념 정리

jsp - 서버에서 자원들(코드)을 사용하는것
javaScript - 클라이언트에서 자원들을 사용
jsp 는 웹 서버에서 실행되는 .jsp 파일
javaScript는 script 태그를 사용하여 표현 - 사용자의 웹하면인 .HTML 파일

서버에서 실행되어 결과를 사용자에게 보여주는 방식이 jsp
자바스크립트는 클라이언트의 웹 브라우저 화면에 실행되어지는 방식

jsp는 서버 언어
javaScript는 클라이언트 언어

jsp
HTML내에 자바 코드를 삽입하여 웹 서버에서 동적으로 웹 브라우저를 관리하는 언어 - 즉 웹 사이트를 보다 쉡게 구축할 수 있도록 만들어주는 스크립트 언어

jsp는 자바언어를 기반으로 하는 스크립트 언어로 자바 기능을 그대로 사용할 수 있는 장점이 있으며 자바 기반이기에 운영체제가 상관없이 플랫폼에 독집적이다

HTML 코드 속에 들어가는 자바 소스코드로 <% 자바코드 %> 또는 <%= 자바코드=%> 형태로 사용

jsp 특징
-웹 프로그래머는 소스코드를 수정할 경우 디자인 작업에 신경쓰지 않아도 되기 때문에 작업 효율이 올라간다
-HTTP와 같은 프로토콜에 따라 클라이언트의 요청을 처리하고 응답한다
-대규모 애플리케이션을 구현할 때 사용되는 스프링 프레임워크와 연동이 가능하다.

jsp가 실행되면 자바 서블릿(Servlet)으로 변환되며 웹 어플리케이션 서버에서 동작되면서 필요한 기능을 수행 후 생성된 데이터를 웹페이지와 함께 클라이언트로 응답

자바 서블릿(Java Servlet)
서블릿이란 웹페이지를 동적으로 생성하기 위해 서버측 프로그램을 말한다.
이는 자바 언어를 기반으로 만들지며 웹 어플리케이션 서버 ( Web Application Sever ) 위에서 컴파일 되고 동작한다.

Servlet과 JSP의 개념
기능의 차이는 없고 역할의 차이만 있다
Servlet이란
- 웹 기반의 요청에 대한 동적인 처리가 가능한 server Side에서 돌아가는 java Program
= java 코드안에 HTML 코드(하나의 클래스)
- 웹 개발을 위해 만든 표준
JSP란
- java 언어를 기반으로 하는 Server Side 스크립트 언어
= HTML 코드 안에 java 코드
- Servlet을 보완하고 기술을 확장한 스크립트 방식 표준
	- Servlet의 모든 기능 + 추가적인 기능

Servlet과 jpa 차이
Servlet
- 자바 코드 안에 HTML 코드
- data processing(Controller)에 좋다
- 즉 DB와의 통신, Busimess Logic 호출, 데이터를 읽고 확이하는 작업 등에 유용하다
- Servlet이 수정된 경우 Java 코드를 컴파일(.class 파일 생성)한 후 동적인 페이지를 처리하기 때문에 전체 코드를 업데이트하고 다시 컴파일한 후 재배포하는 작업이 필요하다(개발 생산성 저하)
JSP
- HTML 코드안에 Java코드
- presentation(View)에 좋다
- 즉 요청 결과를 나타내는 HTML 작성하는데 유용하다
- JSP가 수정된 경우 재배포할 필요가 없이 WAS가 알아서 처리한다(쉬운 배포)

jsp만을 이용하는 모델
jsp가 사용자의 요청을 받아 Java Bean(Dto, Dao)을 호출하여 적절한 동적인 페이지를 생성한다.
동작 과정
1. jsp로 작성된 프로그램은 내부적으로 WAS에서 Servlet 파일로 변환
2. jsp 태그를 분해하고 추출하여 다시 순수한 HTML 웹 페이지로 변환
3. 클라이언트로 응답

특징
- 개발 속도가 빠르다
- 배우기 쉽다
- 프레젠테이션 로직(View)과 비지니스 로직(Controller)이 혼재한다.
- JSP 코드가 복잡해져 유지 보수가 어려워진다

JSP와 Servlet을 모두 이용하는 모델(MVC Architecture)
JSP와 Servlet을 모두 사용하여 프레젠테이션 로직(View)와 비지니스 로직(Controller)을 분리
View(보여지는 부분)는 HTML이 중심이 되는 JSP를 사용
Controller(다른 자바 클래스에 데이터를 념겨주는 부분)는 Java 코드가 중심이 되는 Servlet을 사용
Model은 java beans로, DTO와 DAO를 통해 Mysql과 같은 DB에 접근

톰캣
아파치 소프트웨어 재단에서 개발하는 Java 기반의 서블릿 컨테이너이자 웹 서버.
JSP/Spring으로 웹사이트를 구축한다면 톰캣은 거의 반드시 사용된다고 볼 수 있다.
Tomcat은 수컷 고양이를 뜻하는 영어 단어이다.

서블릿 컨테이너
서블릿 컨테니너는 서블릿들의 생성, 실행, 파괴를 담당하며 서블릿들을 위한 상자이다.
서버에 만들어진 서블릿이 스스로 작동하는 것이 아니라, 서블릿을 관리 해주는 것이 필요한데, 이러한 역할을 하는 것이 바로 서블릿 컨테이너다.
즉, 서블릿을 '요구사항 명세서'라고 표현한다면, 서블릿 컨테이너는 그 명세서를 보고 개발하는 '개발자'다.
서블릿 컨테이너는 Clinet의 Request를 받아주고 Response할 수 있게, 웹 서버와 소켓을 만들어 통신한다.

서블릿 컨테이너 역할
1.웹서버와의 통신 지원
서블릿 컨테이너는 서블릿과 웹서버가 손쉽게 통신할 수 있게 해주어, 소켓을 만들고 listen, accept 등을 API로 제공하여 복잡한 과정을 생략할 수 있게 해준다.

2. 서블릿 생명주기(Life Cycle) 관리
서블릿 컨테이너는 서블릿의 탄생과 죽음을 관리한다.
서블릿 클래스를 로딩하여 인스턴스화
초기화 메소드를 호출
요청이 들어오면 적절한 서블릿 메소드를 호출합니다.
서블릿 소멸 시 Garbage Collection(가비지 컬렉션)을 진행

3. 멀티쓰레드 지원 및 관리
서블릿 컨테이너는 요청이 올 때 마다 새로운 자바 쓰레드를 하나 생성
HTTP 서비스 메소드를 실행하고 나면, 쓰레드는 자동으로 소멸
원래는 쓰레드를 관리해야 하지만 서버가 다중 쓰레드를 생성 및 운영해주니 쓰레드의 안정성에 대해서 걱정하지 않아도 된다.

4. 선언적인 보안 관리
서블릿 컨테이너를 사용하면 개발자는 보안에 관련된 내용을 서블릿 또는 자바 클래스에 구현해 놓지 않아도 된다.
일반적으로 보안관리는 XML 배포 서술자에다가 기록하므로, 보안에 대해 수정할 일이 생겨도 자바 소스 코드를 수정하여 다시 컴파일 하지 않아도 보안관리가 가능하다.

웹 서버와 서블릿 컨테이너가 request를 처리하는 과정
1.웹서버가 HTTP 요청을 받는다
2.웹서버는 요청을 서블릿 컨테이너로 전달합니다.
3.서블릿이 컨테이너에 없다면, 서블릿을 동적으로 검색하여 컨테이너의 주소 공간에 로드한다
4.컨테이너가 서블릿의 init() 메소드를 호출하면, 서블릿이 초기화된다
: 서블릿이 처음 로드됬을 때 한번만 호출
5.컨테이너가 서블릿의 service() 메소드를 호출하여 HTTP 요청을 처리한다.
(요청의 데이터를 읽고, 응답을 만들어낸다)
6.서블릿은 컨테이너 주소에 남아있고, 다른 HTTP 요청들을 처리할 수 있습니다.
웹서버는 동적으로 생성된 결과를 올바른 위치에 반환한다.

=이 과정에서 jvm의 역할=
-각 요청들을 '분리된 스레드' 내부에서 처리한다
-즉, 서블릿을 사용하는 것은 JVM이 각 요청을 분리된 자바 스레드 내부에서 처리하도록 하는 것
-이는 서블릿 컨테이너의 주요 장점 중 하나이다.
-각 서블릿은 HTTP 요청에 응답하는 특정한 요소들이 있는 자바 클래스이다.
-대부분의 사례에 서블릿 컨테이너는 하나의 JVM에서 동작하지만 컨테이너가 여러개의 JVM들을 필요로하는 문제들이 존재하기도 한다.

서블릿 컨테이너 의 가장 중요한 기능은 요청을 올바른 서블릿에 전달해서 처리되도록하고,
JVM이 해당 요청을 처리 한 후에는 생성된 결과를 올바른 장소에 동적으로 반환 해주는 것이다.

롬복
롬복은 자바 개발할 때 자주 사용하는 코드 Getter, Setter, 기본생성자, toString 등을 어노테이션으로 자동 생성해 준다.

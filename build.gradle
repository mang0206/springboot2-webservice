// 프로젝트의 플러그인 의존성(라이브러리) 관리를 위한 설정
buildscript {
    //ext는 build.gradle에서 사용하는 전역변수를 설정하겠다는 의미
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    //라이브러리들을 어떤 원격 저장소에서 받을 지를 정한다.
    repositories {
        mavenCentral()
        jcenter()
    }
    //프로젝트 개발에 필요한 라이브러리들을 선언하는 곳
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'org.example'
version '1.0-SNAPSHOT'

//각종 라이브러리들을 어떤 원격 저장소에서 받을지를 정한다.
repositories {
    mavenCentral()
}

//dependencies {
//    compile('org.springframework.boot:spring-boot-starter-web')
//    testCompile('org.springframework.boot:spring-boot-starter-test')
//}
dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    // 스프링 부트용 Spring Data Jpa 추상화 라이브러리
    // 스프링 부트 버전에 맞춰 자동으로 JPA관련 라이브러리들의 버전을 관리해 준다.
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    // 인메모리 관계형 데이터베이스
    //별도의 설치가 필요 없이 프로젝트 의존성만으로 관리할 수있다.
    //메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화된다는 점을 이용하여 테스트 용도로 많이 사용
    implementation('com.h2database:h2')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation('org.springframework.boot:spring-boot-starter-mustache')
}
